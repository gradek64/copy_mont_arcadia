// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ChangePassword @render has BackToAccountLink with Continue to checkout text 1`] = `
<section
  className="ChangePassword"
>
  <Form
    className="MyAccount-form MyAccount-wrapper"
    noValidate={true}
    onSubmit={[Function]}
  >
    <Connect(Input)
      errors={Object {}}
      field={
        Object {
          "isDirty": true,
          "isFocused": false,
          "isTouched": true,
          "value": "Arcadia1",
        }
      }
      isDisabled={true}
      isRequired={true}
      label="Current password"
      name="oldPassword"
      placeholder="Current password"
      setField={[Function]}
      touchedField={[Function]}
      type="password"
    />
    <h3>
      New password
    </h3>
    <p>
      We recommend choosing a password that you haven't used for another online account
    </p>
    <Connect(Input)
      errors={Object {}}
      field={
        Object {
          "isDirty": true,
          "isFocused": false,
          "isTouched": true,
          "value": "Arcadia2",
        }
      }
      isDisabled={true}
      isRequired={true}
      label="New password"
      name="newPassword"
      placeholder="New password"
      setField={[Function]}
      touchedField={[Function]}
      type="password"
    />
    <PasswordCriteriaIndicator
      isTouched={true}
      password="Arcadia2"
    />
    <Button
      className="ChangePassword-saveChanges"
      isDisabled={true}
      type="submit"
    >
      Save New Password
    </Button>
    <Message
      isCompact={false}
      message="Your password has been successfully changed."
      type="confirm"
    />
    <div
      className=""
    >
      <BackToAccountLink
        clickHandler={[Function]}
        text="Continue to checkout"
      />
    </div>
  </Form>
</section>
`;

exports[`ChangePassword @render has correct fields 1`] = `
<section
  className="ChangePassword"
>
  <AccountHeader
    label="Back to My Account"
    link="/my-account"
    title="My password"
  />
  <Form
    className="MyAccount-form MyAccount-wrapper"
    noValidate={true}
    onSubmit={[Function]}
  >
    <Connect(Input)
      errors={Object {}}
      field={
        Object {
          "isDirty": true,
          "isFocused": false,
          "isTouched": true,
          "value": "Arcadia1",
        }
      }
      isDisabled={false}
      isRequired={true}
      label="Current password"
      name="oldPassword"
      placeholder="Current password"
      setField={[Function]}
      touchedField={[Function]}
      type="password"
    />
    <h3>
      New password
    </h3>
    <p>
      We recommend choosing a password that you haven't used for another online account
    </p>
    <Connect(Input)
      errors={Object {}}
      field={
        Object {
          "isDirty": true,
          "isFocused": false,
          "isTouched": true,
          "value": "Arcadia2",
        }
      }
      isDisabled={false}
      isRequired={true}
      label="New password"
      name="newPassword"
      placeholder="New password"
      setField={[Function]}
      touchedField={[Function]}
      type="password"
    />
    <PasswordCriteriaIndicator
      isTouched={true}
      password="Arcadia2"
    />
    <Button
      className="ChangePassword-saveChanges"
      isDisabled={false}
      type="submit"
    >
      Save New Password
    </Button>
    <Message
      isCompact={false}
      type="confirm"
    />
    <div
      className=" hidden"
    >
      <BackToAccountLink
        clickHandler={[Function]}
        text="Back to My Account"
      />
    </div>
  </Form>
</section>
`;

exports[`ChangePassword @render has errors 1`] = `
<section
  className="ChangePassword"
>
  <AccountHeader
    label="Back to My Account"
    link="/my-account"
    title="My password"
  />
  <Form
    className="MyAccount-form MyAccount-wrapper"
    noValidate={true}
    onSubmit={[Function]}
  >
    <Connect(Input)
      errors={Object {}}
      field={
        Object {
          "isDirty": false,
          "isFocused": false,
          "isTouched": false,
          "value": "",
        }
      }
      isDisabled={false}
      isRequired={true}
      label="Current password"
      name="oldPassword"
      placeholder="Current password"
      setField={[Function]}
      touchedField={[Function]}
      type="password"
    />
    <h3>
      New password
    </h3>
    <p>
      We recommend choosing a password that you haven't used for another online account
    </p>
    <Connect(Input)
      errors={Object {}}
      field={
        Object {
          "isDirty": false,
          "isFocused": false,
          "isTouched": false,
          "value": "",
        }
      }
      isDisabled={false}
      isRequired={true}
      label="New password"
      name="newPassword"
      placeholder="New password"
      setField={[Function]}
      touchedField={[Function]}
      type="password"
    />
    <PasswordCriteriaIndicator
      isTouched={false}
      password=""
    />
    <Button
      className="ChangePassword-saveChanges"
      isDisabled={false}
      type="submit"
    >
      Save New Password
    </Button>
    <Message
      isCompact={false}
      type="confirm"
    />
    <div
      className=" hidden"
    >
      <BackToAccountLink
        clickHandler={[Function]}
        text="Back to My Account"
      />
    </div>
  </Form>
</section>
`;

exports[`ChangePassword @render has success 1`] = `
<section
  className="ChangePassword"
>
  <AccountHeader
    label="Back to My Account"
    link="/my-account"
    title="My password"
  />
  <Form
    className="MyAccount-form MyAccount-wrapper"
    noValidate={true}
    onSubmit={[Function]}
  >
    <Connect(Input)
      errors={Object {}}
      field={
        Object {
          "isDirty": false,
          "isFocused": false,
          "isTouched": false,
          "value": "",
        }
      }
      isDisabled={true}
      isRequired={true}
      label="Current password"
      name="oldPassword"
      placeholder="Current password"
      setField={[Function]}
      touchedField={[Function]}
      type="password"
    />
    <h3>
      New password
    </h3>
    <p>
      We recommend choosing a password that you haven't used for another online account
    </p>
    <Connect(Input)
      errors={Object {}}
      field={
        Object {
          "isDirty": false,
          "isFocused": false,
          "isTouched": false,
          "value": "",
        }
      }
      isDisabled={true}
      isRequired={true}
      label="New password"
      name="newPassword"
      placeholder="New password"
      setField={[Function]}
      touchedField={[Function]}
      type="password"
    />
    <PasswordCriteriaIndicator
      isTouched={false}
      password=""
    />
    <Button
      className="ChangePassword-saveChanges"
      isDisabled={true}
      type="submit"
    >
      Save New Password
    </Button>
    <Message
      isCompact={false}
      type="confirm"
    />
    <div
      className=""
    >
      <BackToAccountLink
        clickHandler={[Function]}
        text="Back to My Account"
      />
    </div>
  </Form>
</section>
`;

exports[`ChangePassword @render has success but result constains an error 1`] = `
<section
  className="ChangePassword"
>
  <AccountHeader
    label="Back to My Account"
    link="/my-account"
    title="My password"
  />
  <Form
    className="MyAccount-form MyAccount-wrapper"
    noValidate={true}
    onSubmit={[Function]}
  >
    <Connect(Input)
      errors={Object {}}
      field={
        Object {
          "isDirty": true,
          "isFocused": false,
          "isTouched": true,
          "value": "Arcadia1",
        }
      }
      isDisabled={false}
      isRequired={true}
      label="Current password"
      name="oldPassword"
      placeholder="Current password"
      setField={[Function]}
      touchedField={[Function]}
      type="password"
    />
    <h3>
      New password
    </h3>
    <p>
      We recommend choosing a password that you haven't used for another online account
    </p>
    <Connect(Input)
      errors={Object {}}
      field={
        Object {
          "isDirty": true,
          "isFocused": false,
          "isTouched": true,
          "value": "Arcadia2",
        }
      }
      isDisabled={false}
      isRequired={true}
      label="New password"
      name="newPassword"
      placeholder="New password"
      setField={[Function]}
      touchedField={[Function]}
      type="password"
    />
    <PasswordCriteriaIndicator
      isTouched={true}
      password="Arcadia2"
    />
    <Button
      className="ChangePassword-saveChanges"
      isDisabled={false}
      type="submit"
    >
      Save New Password
    </Button>
    <Message
      isCompact={false}
      message="Password needs to be changed"
      type="error"
    />
    <div
      className=" hidden"
    >
      <BackToAccountLink
        clickHandler={[Function]}
        text="Back to My Account"
      />
    </div>
  </Form>
</section>
`;

exports[`ChangePassword @render in default state 1`] = `
<section
  className="ChangePassword"
>
  <AccountHeader
    label="Back to My Account"
    link="/my-account"
    title="My password"
  />
  <Form
    className="MyAccount-form MyAccount-wrapper"
    noValidate={true}
    onSubmit={[Function]}
  >
    <Connect(Input)
      errors={Object {}}
      field={
        Object {
          "isDirty": false,
          "isFocused": false,
          "isTouched": false,
          "value": "",
        }
      }
      isDisabled={false}
      isRequired={true}
      label="Current password"
      name="oldPassword"
      placeholder="Current password"
      setField={[Function]}
      touchedField={[Function]}
      type="password"
    />
    <h3>
      New password
    </h3>
    <p>
      We recommend choosing a password that you haven't used for another online account
    </p>
    <Connect(Input)
      errors={Object {}}
      field={
        Object {
          "isDirty": false,
          "isFocused": false,
          "isTouched": false,
          "value": "",
        }
      }
      isDisabled={false}
      isRequired={true}
      label="New password"
      name="newPassword"
      placeholder="New password"
      setField={[Function]}
      touchedField={[Function]}
      type="password"
    />
    <PasswordCriteriaIndicator
      isTouched={false}
      password=""
    />
    <Button
      className="ChangePassword-saveChanges"
      isDisabled={false}
      type="submit"
    >
      Save New Password
    </Button>
    <Message
      isCompact={false}
      type="confirm"
    />
    <div
      className=" hidden"
    >
      <BackToAccountLink
        clickHandler={[Function]}
        text="Back to My Account"
      />
    </div>
  </Form>
</section>
`;

exports[`ChangePassword @render should have no AccountHeader component if resetPassword is true 1`] = `
<section
  className="ChangePassword"
>
  <Form
    className="MyAccount-form MyAccount-wrapper"
    noValidate={true}
    onSubmit={[Function]}
  >
    <Connect(Input)
      errors={Object {}}
      field={
        Object {
          "isDirty": false,
          "isFocused": false,
          "isTouched": false,
          "value": "",
        }
      }
      isDisabled={false}
      isRequired={true}
      label="Current password"
      name="oldPassword"
      placeholder="Current password"
      setField={[Function]}
      touchedField={[Function]}
      type="password"
    />
    <h3>
      New password
    </h3>
    <p>
      We recommend choosing a password that you haven't used for another online account
    </p>
    <Connect(Input)
      errors={Object {}}
      field={
        Object {
          "isDirty": false,
          "isFocused": false,
          "isTouched": false,
          "value": "",
        }
      }
      isDisabled={false}
      isRequired={true}
      label="New password"
      name="newPassword"
      placeholder="New password"
      setField={[Function]}
      touchedField={[Function]}
      type="password"
    />
    <PasswordCriteriaIndicator
      isTouched={false}
      password=""
    />
    <Button
      className="ChangePassword-saveChanges"
      isDisabled={false}
      type="submit"
    >
      Save New Password
    </Button>
    <Message
      isCompact={false}
      type="confirm"
    />
    <div
      className=" hidden"
    >
      <BackToAccountLink
        clickHandler={[Function]}
        text="Back to My Account"
      />
    </div>
  </Form>
</section>
`;

exports[`ChangePassword @render successfully submitted 1`] = `
<section
  className="ChangePassword"
>
  <AccountHeader
    label="Back to My Account"
    link="/my-account"
    title="My password"
  />
  <Form
    className="MyAccount-form MyAccount-wrapper"
    noValidate={true}
    onSubmit={[Function]}
  >
    <Connect(Input)
      errors={Object {}}
      field={
        Object {
          "isDirty": true,
          "isFocused": false,
          "isTouched": true,
          "value": "Arcadia1",
        }
      }
      isDisabled={true}
      isRequired={true}
      label="Current password"
      name="oldPassword"
      placeholder="Current password"
      setField={[Function]}
      touchedField={[Function]}
      type="password"
    />
    <h3>
      New password
    </h3>
    <p>
      We recommend choosing a password that you haven't used for another online account
    </p>
    <Connect(Input)
      errors={Object {}}
      field={
        Object {
          "isDirty": true,
          "isFocused": false,
          "isTouched": true,
          "value": "Arcadia2",
        }
      }
      isDisabled={true}
      isRequired={true}
      label="New password"
      name="newPassword"
      placeholder="New password"
      setField={[Function]}
      touchedField={[Function]}
      type="password"
    />
    <PasswordCriteriaIndicator
      isTouched={true}
      password="Arcadia2"
    />
    <Button
      className="ChangePassword-saveChanges"
      isDisabled={true}
      type="submit"
    >
      Save New Password
    </Button>
    <Message
      isCompact={false}
      message="Your password has been successfully changed."
      type="confirm"
    />
    <div
      className=""
    >
      <BackToAccountLink
        clickHandler={[Function]}
        text="Back to My Account"
      />
    </div>
  </Form>
</section>
`;
