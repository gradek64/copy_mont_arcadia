#!/usr/bin/env groovy
@Library('devops_repo_shared_library')_

def eb_job_path         = "${EVENT_JOB_PATH}"
def aws_ecr_creds_id    = "JenkinsSlaveDeploymentRole"
def ecr_registry_id     = "623971903498"

pipeline {

  agent {
      label 'spot'
  }

  parameters {
      string(name: 'FEATURE_FLAG_BRANCH', defaultValue: null, description: 'Overrides the feature flag branch in use.')
      string(name: 'DEPLOY_BRANCH_OR_TAG', defaultValue: 'devops/deploy_description', description: 'Choose which monty branch to build')
  }

  environment {
    // Required for the call to scripts/full-monty/build.sh
    AWS_DEPLOY_ROLE_ARN = "${ARN_DEV_JENKINS_SLAVE}"
    AWS_REGION = "eu-west-1"
  }

  stages {

    stage("Pre-Flight") {
        steps {
            script {
                println(ssh_conn.get_ssh_conn())
            }
        }
    }

    stage("Checkout") {

      steps {

        cleanWs()

        dir('.') {
            checkout resolveScm(source: [
                $class: 'GitSCMSource',
                credentialsId: 'feature-config-deployment',
                remote: 'git@github.com:ag-digital/full-monty.git',
                traits: [
                    [$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'],
                    [$class: 'jenkins.plugins.git.traits.TagDiscoveryTrait']
                ]
            ], targets: ["${DEPLOY_BRANCH_OR_TAG}", 'develop'])
        }

        dir('packages/monty-feature-flags') {
          checkout resolveScm(source: [
            $class: 'GitSCMSource',
            credentialsId: 'feature-config-deployment',
            remote: 'git@github.com:ag-digital/monty-feature-flags.git',
              traits: [
                  [$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'],
                  [$class: 'jenkins.plugins.git.traits.TagDiscoveryTrait']
              ]
          ], targets: ["${FEATURE_FLAG_BRANCH}", "${GIT_BRANCH}", 'develop'])
        }

        dir('pipeline/scripts') {
          checkout resolveScm(source: [
            $class: 'GitSCMSource',
            credentialsId: '31e30b06-b43e-4d4b-92fb-0897fcfb2bb5',
            remote: 'git@github.com:ag-digital/devops.git',
              traits: [
                  [$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'],
                  [$class: 'jenkins.plugins.git.traits.TagDiscoveryTrait']
              ]
          ], targets: ['master'])
        }
      }
    }

    stage("Docker Build") {

        environment {
            BRANCH_NAME = "${DEPLOY_BRANCH_OR_TAG}"
        }

        steps {
            withCredentials([string(credentialsId: 'npm-auth-token', variable: 'NPM_TOKEN')]) {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'JenkinsSlaveDeploymentRole']]) {
                    sh 'set +x; $(aws ecr get-login --no-include-email --region eu-west-1)'
                    sh 'pipeline/scripts/scripts/full-monty/build.sh monty'
                }
            }
        }
    }

    // stage("Unit Tests") {
    //   agent {
    //     docker {
    //       image "${ECR_URL}/monty:${env.GIT_COMMIT}"
    //       reuseNode true
    //     }
    //   }
    //
    //   environment {
    //     NODE_ENV = 'development'
    //     CMS_TEST_MODE = 'true'
    //     TEST_REPORT_PATH = "${env.WORKSPACE}"
    //     FUNCTIONAL_TESTS = 'true'
    //     BABEL_ENV = 'test'
    //   }
    //
    //   steps {
    //     sh 'env'
    //     sh 'cd /monty && npm run jest:fast'
    //   }
    //
    //   post {
    //     always {
    //       junit 'test-report.xml'
    //     }
    //   }
    // }
    //
    // stage('Sonar Scan') {
    //   steps {
    //     script {
    //       // sonarqube plugin doesn't give a declarative pipeline shortcut so we have to do that script
    //       def scannerHome = tool 'SonarScanner4-0';
    //       withSonarQubeEnv('DevSonarQube') {
    //           sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${env.GIT_COMMIT}"
    //       }
    //     }
    //     // withSonarQubeEnv('DevSonarQube') { waitForQualityGate abortPipeline: false }
    //   }
    //   post {
    //     always {
    //       archiveArtifacts artifacts: '.scannerwork/report-task.txt', allowEmptyArchive: true
    //     }
    //   }
    // }

    stage("Docker Push") {

        environment {
            BRANCH_NAME = "${DEPLOY_BRANCH_OR_TAG}"
        }

        steps {
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'JenkinsSlaveDeploymentRole']]) {
                sh 'set +x; $(aws ecr get-login --no-include-email --region eu-west-1)'
                sh 'pipeline/scripts/scripts/full-monty/push.sh monty'
            }
        }
    }

    stage("Clair Scan") {

        steps {
            ansiColor('xterm') {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: "CLAIR_SCAN_ISSUE") {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${aws_ecr_creds_id}"]]) {
                        script {
                            clair.scan("${ECR_URL}/monty:${GIT_COMMIT}", "${AWS_REGION}", "${ecr_registry_id}", "${CLAIR_DYNAMODB_TABLE}")
                        }
                    }
                }
            }
        }
    }

  }

  post {

      success {
          // Notifying Event Bus
          build job: eb_job_path, wait: false,
              parameters: [
                  string(name: 'BUILD_URL_IN', value: "${BUILD_URL}"),
                  string(name: 'JOB_STAGE', value: 'finish')
              ]
      }

      failure {
          // Notifying Event Bus
          build job: eb_job_path, wait: false,
              parameters: [
                  string(name: 'BUILD_URL_IN', value: "${BUILD_URL}"),
                  string(name: 'JOB_STAGE', value: 'fail')
              ]
      }
  }

}
