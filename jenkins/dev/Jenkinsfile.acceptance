#!/usr/bin/env groovy
@Library('devops_repo_shared_library')_

// The list of current WCS environments is set as a Jenkins global system variable
def WCS_ACTUALS = "${WCS_ENVIRONMENT_LIST}".tokenize(',[]')
// to avoid all the funky %2F in the BUILD_TAG strings we do this. yay
def NICE_TAG = env.JOB_BASE_NAME.replaceAll("%2F", "-") + "-" + env.BUILD_ID
def CLEANUP_USER                      =   "ec2-user"
def CLEANUP_GROUP                     =   "ec2-user"
def eb_job_path                       =   "${EVENT_JOB_PATH}"
def current_build_results             =   [:]
current_build_results.tests_mobile    =   false
current_build_results.tests_desktop   =   false
// Setup any required geo related network aliases for the docker container
def monty_network_aliases             =   []
def monty_net_alias                   =   "--network-alias "

def burton_co_uk                      =   "local.m.burton.co.uk"
def dorothyperkins_com                =   "local.m.dorothyperkins.com"
def evans_co_uk                       =   "local.m.evans.co.uk"
def missselfridge_com                 =   "local.m.missselfridge.com"
def topman_com                        =   "local.m.topman.com"
def topshop_com                       =   "local.m.topshop.com"
def topshop_fr                        =   "local.m.fr.topshop.com"
def topshop_de                        =   "local.m.de.topshop.com"
def wallis_co_uk                      =   "local.m.wallis.co.uk"

monty_network_aliases                 +=  monty_net_alias + burton_co_uk
monty_network_aliases                 +=  monty_net_alias + dorothyperkins_com
monty_network_aliases                 +=  monty_net_alias + evans_co_uk
monty_network_aliases                 +=  monty_net_alias + missselfridge_com
monty_network_aliases                 +=  monty_net_alias + topman_com
monty_network_aliases                 +=  monty_net_alias + topshop_com
monty_network_aliases                 +=  monty_net_alias + topshop_fr
monty_network_aliases                 +=  monty_net_alias + topshop_de
monty_network_aliases                 +=  monty_net_alias + wallis_co_uk

def monty_all_aliases                 =   monty_network_aliases.join(" ")

pipeline {

    agent {
        label 'spot'
    }

    parameters {
        string(name: 'ECR_TAG', defaultValue: 'develop', description: 'Tag of monty docker image from ECR')
        choice(name: 'WCS_ENVIRONMENT', choices: "${WCS_ACTUALS.join('\n').toString()}", description: 'WCS environment to be used by the monty run')
        choice(name: 'CYPRESS_BROWSER', choices: 'electron\nchrome', description: 'Browser used by cypress. Chrome is unable to record videos but seem to be more stable')
        choice(name: 'RUN_TESTS', choices: 'All Tests\nDesktop Tests\nMobile Tests', description: 'Choose which tests to run')
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '5', numToKeepStr: '20', artifactDaysToKeepStr: '5', artifactNumToKeepStr: '20'))
        timestamps()
        // disableConcurrentBuilds()
        durabilityHint 'PERFORMANCE_OPTIMIZED'
    }

    stages {

        stage("Pre-Flight") {

          steps {

            script {
                println(ssh_conn.get_ssh_conn())
                // If only one set of tests are selected we need to modify the overall build check so it won't fail
                if (params.RUN_TESTS == "Desktop Tests") {
                    current_build_results.tests_mobile = true
                } else if (params.RUN_TESTS == "Mobile Tests") {
                    current_build_results.tests_desktop = true
                }
            }
          }
        }

        stage('Build functional tests image') {
            environment {
                NPM_TOKEN = credentials('devops-bot-npm-auth-token')
            }
            steps {
                // githubNotify context: 'full-monty/tests/functional', description: 'Running functional tests...', status: 'PENDING', targetUrl: env.BUILD_URL
                githubNotify context: 'full-monty/functional_tests', description: 'Running functional tests...', status: 'PENDING', targetUrl: env.BUILD_URL
                echo "INFO - Attempting to prune docker images"
                sh 'docker image prune -f || echo "INFO - Docker may already be pruning"'
                echo "INFO - Building functional tests docker image"
                sh "docker build --build-arg NPM_TOKEN=${NPM_TOKEN} -t monty_functional:${NICE_TAG} -t ${ECR_URL}/monty-functional:${env.GIT_COMMIT} -f docker/functional/Dockerfile ."
                // we want a custom docker network so things a sexier
                echo "INFO - Creating docker network named monty_functional${NICE_TAG}"
                sh "docker network create net_monty_functional_${NICE_TAG}"
            }
        }

        stage('Prep and start Monty') {
            options { skipDefaultCheckout() }

            when {
                anyOf {
                    // If its a pull request
                    changeRequest();
                    // If some tests are selected
                    expression { params.RUN_TESTS == "All Tests" || params.RUN_TESTS == "Desktop Tests" || params.RUN_TESTS == "Mobile Tests" }
                }
                beforeAgent true
            }

            environment {
                BASIC_AUTH_ENABLED='false'
                CMS_TEST_MODE='true'
                CORE_API_HOST='local.mock-server'
                CORE_API_PORT=4000
                FETCH_WCS_CONFIGS='true'
                FUNCTIONAL_TESTS='true'
                NODE_ENV = 'production'
                QUBIT_DISABLED="${(params.QUBIT_DISABLED) ? params.QUBIT_DISABLED : true}"
                QUBIT_ENVIRONMENT="${(params.QUBIT_ENVIRONMENT) ? params.QUBIT_ENVIRONMENT : nil}"
                REDIS_HOST_FOR_SESSION_STORE='monty_cache'
                REDIS_PORT_FOR_SESSION_STORE=6379
                REDIS_URL='tcp://monty_cache:6379'
                USE_NEW_HANDLER='true'
                WCS_ENVIRONMENT = "${params.WCS_ENVIRONMENT}"
            }

            stages {
                stage('Pull monty from ECR') {

                    steps {
                        echo 'Pulling latest develop monty'
                        script {
                            def FORMATTED_ECR_TAG = params.ECR_TAG
                            if (FORMATTED_ECR_TAG.contains("/")) {
                              FORMATTED_ECR_TAG = FORMATTED_ECR_TAG.replace("/", "-")
                              println("INFO - Replaced forward slash [/] in branch name with dash [-] to pull from ECR")
                            }
                            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'JenkinsSlaveDeploymentRole']]) {
                                sh 'set +x; $(aws ecr get-login --no-include-email --region eu-west-1)'
                                sh "docker pull ${ECR_URL}/monty:${FORMATTED_ECR_TAG}"
                                sh "docker tag ${ECR_URL}/monty:${FORMATTED_ECR_TAG} arcadiagroup/full-monty:monty-functional-${NICE_TAG}"
                            }
                        }
                    }
                }

                stage('Start monty container') {
                    options { skipDefaultCheckout() }
                    steps {
                        script {
                            echo "INFO - Starting up redis named redis_monty_functional_${NICE_TAG}"
                            def redis = docker.image('redis:3-alpine').run("--name redis_monty_functional_${NICE_TAG} --network net_monty_functional_${NICE_TAG} --network-alias monty_cache")
                            // fire up full-monty with relevant environment variables
                            echo "INFO - Starting up full-monty named: monty-functional-${NICE_TAG}"
                            def monty = docker.image("arcadiagroup/full-monty:monty-functional-${NICE_TAG}")
                                    .run("--rm --name monty_functional_${NICE_TAG} --network net_monty_functional_${NICE_TAG} ${monty_all_aliases} --env-file=docker/functional/monty-env --shm-size=1g")
                        }
                        // wait til the node app is ready. using wget since there is no curl in the container
                        echo 'INFO - Waiting for monty be be available'
                        sh "docker exec monty_functional_${NICE_TAG} sh -c 'while [[ \"\$(wget -qO- localhost:3000/health )\" != \"Ok\" ]]; do sleep 5; done'"
                        sh "docker exec monty_functional_${NICE_TAG} sh -c 'printenv | sort'"
                    }
                }
            }
        }

        stage('Run Tests') {
            when {
                anyOf {
                    // If its a pull request
                    changeRequest();
                    // When any tests are selected
                    expression { params.RUN_TESTS == "All Tests" || params.RUN_TESTS == "Desktop Tests" || params.RUN_TESTS == "Mobile Tests" }
                }
                beforeAgent true
            }
            options {
                skipDefaultCheckout()
                timeout(time: 90, unit: 'MINUTES')
            }

            environment {
                CYPRESS_BROWSER = "${params.CYPRESS_BROWSER}"
                MONTY_PORT = 3000
                NODE_ENV = 'production'
            }

            stages {

                  stage('Test Desktop') {
                    when {
                        expression { params.RUN_TESTS == "All Tests" || params.RUN_TESTS == "Desktop Tests" }
                    }
                    agent {
                      docker {
                        image "monty_functional:${NICE_TAG}"
                        reuseNode true
                        label 'spot'
                        args "--shm-size=1500m --network net_monty_functional_${NICE_TAG} --network-alias local.mock-server -u root"
                      }
                    }
                    environment {
                      BREAKPOINT = 'desktop'
                    }

                    steps {
                      echo 'INFO - Running desktop tests'
                      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: "FAILED_DESKTOP_TESTS") {
                        sh 'LOW_MEMORY=true NO_COLOR=1 $(which cypress) run --browser=${CYPRESS_BROWSER} --project=/monty/test/functional --reporter=junit --reporter-options="mochaFile=$(pwd)/test/functional/output/desktop/test-results.[hash].xml" --config screenshotsFolder=$(pwd)/test/functional/screenshots/desktop,videosFolder=$(pwd)/test/functional/videos/desktop,reportFolder=$(pwd)/test/functional/mochawesome-report/assets'
                      }
                    }

                    post {
                      always {
                        sh 'cp -R /monty/node_modules/mochawesome-merge/tests/mochawesome-report ./mochawesome-report'
                        sh 'cp /monty/mock-server/output.log ./mock-server-desktop-output.log'
                        archiveArtifacts artifacts: 'mock-server-desktop-output.log', allowEmptyArchive: true
                        archiveArtifacts artifacts: 'test/functional/screenshots/desktop/**/*.png', allowEmptyArchive: true
                        archiveArtifacts artifacts: 'test/functional/videos/desktop/**/*.mp4', allowEmptyArchive: true
                        archiveArtifacts artifacts: 'mochawesome-report/**', allowEmptyArchive: true
                        junit 'test/functional/output/desktop/**/*.xml'
                      }

                      success {
                          script {
                            current_build_results.tests_desktop = true
                          }
                      }
                    }
                  }

                  stage('Test Mobile') {

                    when {
                        expression { params.RUN_TESTS == "All Tests" || params.RUN_TESTS == "Mobile Tests" }
                    }
                    agent {
                      docker {
                        image "monty_functional:${NICE_TAG}"
                        reuseNode true
                        label 'spot'
                        args "--shm-size=1500m --network net_monty_functional_${NICE_TAG} --network-alias local.mock-server -u root"
                      }
                    }
                    environment {
                      BREAKPOINT = 'mobile'
                    }
                    steps {
                      echo 'INFO - Running mobile tests'
                      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: "FAILED_MOBILE_TESTS") {
                        sh 'printenv | sort'
                        sh 'LOW_MEMORY=true NO_COLOR=1 $(which cypress) run --browser=${CYPRESS_BROWSER} --project=/monty/test/functional --reporter=junit --reporter-options="mochaFile=$(pwd)/test/functional/output/mobile/${BUILD_NUMBER}/test-results.[hash].xml" --config screenshotsFolder=$(pwd)test/functional/screenshots/mobile,videosFolder=$(pwd)/test/functional/videos/mobile'
                      }
                    }
                    post {

                      always {
                        sh 'cp /monty/mock-server/output.log ./mock-server-mobile-output.log'
                        archiveArtifacts artifacts: 'mock-server-mobile-output.log', allowEmptyArchive: true
                        archiveArtifacts artifacts: 'test/functional/screenshots/mobile/**/*.png', allowEmptyArchive: true
                        archiveArtifacts artifacts: 'test/functional/videos/mobile/**/*.mp4', allowEmptyArchive: true
                        junit 'test/functional/output/mobile/**/*.xml'
                      }

                      success {
                          script {
                            current_build_results.tests_mobile = true
                          }
                      }

                    }
                  }
            }
        }

        stage('Deploy') {
            when {
                branch 'master';
                expression { params.ECR_TAG == 'develop'}
                expression { current_build_results.tests_mobile = true }
                expression {current_build_results.tests_desktop = true }
                beforeAgent true
            }

            steps {
                echo 'pushing it to ECR'
                script {
                    docker.withRegistry("https://${ECR_URL}/monty-functional") {
                        def cypress_ecr = docker.image("${ECR_URL}/monty-functional:${env.GIT_COMMIT}")
                        cypress_ecr.push()
                        cypress_ecr.push('latest')
                    }
                }
            }
        }

        stage("Abort on stage fail") {
            when {
              anyOf {
                expression { current_build_results.containsValue(false) }
              }
            }
            steps {
              script {
                  currentBuild.rawBuild.@result = hudson.model.Result.FAILURE
              }
            }
        }
    }

    post {
        always {
            sh "sudo chown -R ${CLEANUP_USER}:${CLEANUP_GROUP} ${WORKSPACE}"
        }
        success {
            githubNotify context: 'full-monty/functional_tests', description: 'Functional tests passed!', status: 'SUCCESS', targetUrl: env.BUILD_URL
            // Notifying Event Bus
            build job: eb_job_path, wait: false,
                parameters: [
                    string(name: 'BUILD_URL_IN', value: "${BUILD_URL}"),
                    string(name: 'JOB_STAGE', value: 'finish')
                ]
        }
        failure {
            githubNotify context: 'full-monty/functional_tests', description: 'Functional tests failed.', status: 'FAILURE', targetUrl: env.BUILD_URL
            // Notifying Event Bus
            build job: eb_job_path, wait: false,
                parameters: [
                    string(name: 'BUILD_URL_IN', value: "${BUILD_URL}"),
                    string(name: 'JOB_STAGE', value: 'fail')
                ]
        }
        cleanup {
            echo "Stopping and removing all containters related to monty_functional_${NICE_TAG}"
            sh "docker container ls --all --filter name=monty_functional_${NICE_TAG} -q | xargs --no-run-if-empty docker container rm -fv"
            echo "Removing custom network related to monty_functional_${NICE_TAG}"
            sh "docker network ls --filter name=net_monty_functional_${NICE_TAG} -q | xargs --no-run-if-empty docker network rm"
            echo "INFO - Prune Docker volumes and images"
            sh "docker volume prune -f"
            sh "docker image prune -af"
            echo "INFO - Cleanup Workspace"
            cleanWs deleteDirs: true
        }
    }
}
