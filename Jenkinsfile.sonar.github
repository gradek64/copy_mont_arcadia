// to avoid all the funky %2F in the BUILD_TAG strings we do this. yay.
def NICE_TAG = env.JOB_BASE_NAME.replaceAll("%2F", "-") + "-" + env.BUILD_ID

pipeline {
    agent {
        label 'spot'
    }

    parameters {
        string(name: 'ECR_TAG', defaultValue: '', description: 'Tag of monty docker image from ECR')
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '3'))
        timestamps()
        durabilityHint 'PERFORMANCE_OPTIMIZED'
    }

    stages {
        stage('Github Notify - PR Init ') {
            steps {
                //Notify github PR of the initiation of the scan
                githubNotify context: 'full-monty SonarQube Scan', credentialsId: '6b465e99-413d-4667-aa07-739b3b3af1d0', repo: 'full-monty', account: 'ag-digital', sha: "${env.GIT_COMMIT}", description: 'Running SonarScanner...', status: 'PENDING', targetUrl: env.BUILD_URL
            }
        }

        stage('Pull from ECR') {
            steps {
                echo "cleanup a bit of space hopefully"
                sh 'docker image prune -f'
                sh 'rm -f eslint_src.stylish.txt && rm -rf coverage/ && rm -rf test-report.xml'
                echo "Getting latest monty docker image from ECR"
                sh 'set +x; $(aws ecr get-login --no-include-email --region eu-west-1)'
                script {
                    def MONTY_TAG = (params.ECR_TAG == '') ? env.GIT_COMMIT : params.ECR_TAG
                    sh "docker pull ${ECR_URL}/monty:${MONTY_TAG}"
                    // tag it with something predictable and unique so we can use it easily at later stages
                    sh "docker tag ${ECR_URL}/monty:${MONTY_TAG} monty_tests_unit:${NICE_TAG}"
                }
            }
        }

        stage('Run Tests') {
            options {
                skipDefaultCheckout()
            }

            parallel {
                stage('Unit') {
                    stages {
                        stage('Unit Sequence') {
                            agent {
                                docker {
                                    image "monty_tests_unit:${NICE_TAG}"
                                    reuseNode true
                                    label 'spot'
                                }
                            }

                            environment {
                                NODE_ENV = 'development'
                                CMS_TEST_MODE = 'true'
                            }

                            steps {
                                sh 'rm -rf /monty/coverage && rm -rf /monty/test-report.xml'
                                sh 'cd /monty && /monty/node_modules/.bin/jest --config=/monty/build/unit/jest.config.json --coverage --ci'               
                            }

                            post {
                                always {
                                    sh 'cp /monty/test-report.xml ./test-report.xml'
                                    junit 'test-report.xml'
                                    sh 'cp -a /monty/coverage/* ./'
                                    sh 'sed -i.bak "s@^SF:/monty@SF:$(pwd)@" lcov.info'
                                }
                            }
                        }

                        stage('Scan Sequence') {
                            steps {
                                script {
                                        // sonarqube plugin doesn't give a declarative pipeline shortcut so we have to do that script
                                        def scannerHome = tool 'SonarScanner';
                                        withSonarQubeEnv('DevSonarQube') {
                                            sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${ECR_TAG}"
                                        }
                                    }
                                // withSonarQubeEnv('DevSonarQube') { waitForQualityGate abortPipeline: false }
                            }
                            post {
                                always {
                                    archiveArtifacts artifacts: '.scannerwork/report-task.txt', allowEmptyArchive: true
                                }
                            }
                        }
                    }
                }

                stage('Lint') {
                    agent {
                        docker {
                            image "monty_tests_unit:${NICE_TAG}"
                            reuseNode true
                            label 'spot'
                        }
                    }

                    environment {
                        NODE_ENV = 'development'
                        CMS_TEST_MODE = 'true'
                    }

                    steps {
                        echo 'running src lint'
                        sh 'cd /monty && ./node_modules/.bin/eslint -f stylish --rulesdir=build/eslint-rules/ "src/**/*.js" "src/**/*.jsx" > eslint_src.stylish.txt'
                        sh 'cd /monty && ./node_modules/.bin/eslint -f stylish --rulesdir=build/eslint-rules/ "test/unit/**/*.js" "test/unit/**/*.jsx" > eslint_unit.stylish.txt'
                        sh 'cd /monty && ./node_modules/.bin/eslint -f stylish --rulesdir=build/eslint-rules/ "test/integration/**/*.js" "test/integration/**/*.jsx" > eslint_integration.stylish.txt'
                    }

                    post {
                        always {
                            sh 'cp /monty/eslint_*.stylish.txt ./'
                            sh 'cat eslint_*.stylish.txt'
                            archiveArtifacts 'eslint_*.stylish.txt'
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            githubNotify context: 'full-monty SonarQube Scan', credentialsId: '6b465e99-413d-4667-aa07-739b3b3af1d0', repo: 'full-monty', account: 'ag-digital', sha: "${env.GIT_COMMIT}", status: 'SUCCESS', description: 'Finished sonar scan', targetUrl: env.BUILD_URL
        }
        failure {
            githubNotify context: 'full-monty SonarQube Scan', credentialsId: '6b465e99-413d-4667-aa07-739b3b3af1d0', repo: 'full-monty', account: 'ag-digital', sha: "${env.GIT_COMMIT}", status: 'FAILURE', description: 'Failed sonar scan', targetUrl: env.BUILD_URL
        }
    }
}